---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: codearena-execution
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'codearena-execution'
        
    rule_files:
      - "/etc/prometheus/rules/*.yml"
    
    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager:9093
    
    scrape_configs:
      # Prometheus itself
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']
      
      # Execution API
      - job_name: 'execution-api'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - codearena-execution
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: execution-api-headless
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: metrics
          - source_labels: [__meta_kubernetes_pod_name]
            target_label: instance
          - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_component]
            target_label: component
        metrics_path: /metrics
        scrape_interval: 10s
        
      # Execution Workers
      - job_name: 'execution-worker'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - codearena-execution
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: execution-worker-headless
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: metrics
          - source_labels: [__meta_kubernetes_pod_name]
            target_label: instance
          - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_component]
            target_label: component
        metrics_path: /metrics
        scrape_interval: 10s
        
      # Redis
      - job_name: 'redis'
        static_configs:
          - targets: ['redis-service:6379']
        metrics_path: /metrics
        scrape_interval: 30s
        
      # Kubernetes API Server
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
          - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https
        
      # Kubernetes Nodes
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
          - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics
            
      # Container Metrics (cAdvisor)
      - job_name: 'kubernetes-cadvisor'
        kubernetes_sd_configs:
          - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
            
  rules.yml: |
    groups:
      - name: execution-system.rules
        rules:
          # API Metrics
          - record: api:request_rate
            expr: rate(http_requests_total[5m])
            
          - record: api:request_duration_99p
            expr: histogram_quantile(0.99, rate(http_request_duration_seconds_bucket[5m]))
            
          - record: api:error_rate
            expr: rate(http_requests_total{status=~"5.."}[5m]) / rate(http_requests_total[5m])
            
          # Worker Metrics
          - record: worker:job_processing_rate
            expr: rate(jobs_processed_total[5m])
            
          - record: worker:job_duration_99p
            expr: histogram_quantile(0.99, rate(job_duration_seconds_bucket[5m]))
            
          - record: worker:active_jobs
            expr: jobs_active
            
          # Queue Metrics
          - record: queue:depth
            expr: redis_queue_length
            
          - record: queue:wait_time_99p
            expr: histogram_quantile(0.99, rate(queue_wait_time_seconds_bucket[5m]))

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-alerts
  namespace: codearena-execution
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring
data:
  alerts.yml: |
    groups:
      - name: execution-system.alerts
        rules:
          # High Error Rate
          - alert: HighAPIErrorRate
            expr: api:error_rate > 0.05
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High API error rate detected"
              description: "API error rate is {{ $value }}% for the last 5 minutes"
              
          # High Response Time
          - alert: HighAPILatency
            expr: api:request_duration_99p > 2.0
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High API latency detected"
              description: "99th percentile API latency is {{ $value }}s"
              
          # Queue Depth
          - alert: HighQueueDepth
            expr: queue:depth > 100
            for: 2m
            labels:
              severity: warning
            annotations:
              summary: "High queue depth detected"
              description: "Queue depth is {{ $value }} jobs"
              
          # Worker Health
          - alert: WorkerDown
            expr: up{job="execution-worker"} == 0
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: "Worker instance is down"
              description: "Worker {{ $labels.instance }} has been down for more than 1 minute"
              
          # API Health
          - alert: APIDown
            expr: up{job="execution-api"} == 0
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: "API instance is down"
              description: "API {{ $labels.instance }} has been down for more than 1 minute"
              
          # Redis Health
          - alert: RedisDown
            expr: up{job="redis"} == 0
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: "Redis is down"
              description: "Redis has been down for more than 1 minute"
              
          # Resource Usage
          - alert: HighMemoryUsage
            expr: (container_memory_usage_bytes / container_spec_memory_limit_bytes) > 0.9
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High memory usage detected"
              description: "Container {{ $labels.container }} is using {{ $value }}% of available memory"
              
          - alert: HighCPUUsage
            expr: rate(container_cpu_usage_seconds_total[5m]) > 0.8
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High CPU usage detected"
              description: "Container {{ $labels.container }} is using {{ $value }}% of available CPU"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: codearena-execution
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus
      app.kubernetes.io/component: monitoring
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus
        app.kubernetes.io/component: monitoring
    spec:
      serviceAccountName: prometheus
      containers:
      - name: prometheus
        image: prom/prometheus:v2.45.0
        args:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus/'
          - '--web.console.libraries=/etc/prometheus/console_libraries'
          - '--web.console.templates=/etc/prometheus/consoles'
          - '--storage.tsdb.retention.time=30d'
          - '--web.enable-lifecycle'
          - '--web.enable-admin-api'
        ports:
        - containerPort: 9090
          name: prometheus
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus/
        - name: prometheus-alerts
          mountPath: /etc/prometheus/rules/
        - name: prometheus-storage
          mountPath: /prometheus/
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: prometheus
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /-/ready
            port: prometheus
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-alerts
        configMap:
          name: prometheus-alerts
      - name: prometheus-storage
        persistentVolumeClaim:
          claimName: prometheus-pvc

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-pvc
  namespace: codearena-execution
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: codearena-execution
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring
spec:
  type: ClusterIP
  ports:
  - port: 9090
    targetPort: prometheus
    protocol: TCP
    name: prometheus
  selector:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: codearena-execution
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: codearena-execution 