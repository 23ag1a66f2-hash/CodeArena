---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: execution-worker
  namespace: codearena-execution
  labels:
    app.kubernetes.io/name: execution-worker
    app.kubernetes.io/component: worker
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 3
      maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: execution-worker
      app.kubernetes.io/component: worker
  template:
    metadata:
      labels:
        app.kubernetes.io/name: execution-worker
        app.kubernetes.io/component: worker
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: execution-worker
      containers:
      - name: worker
        image: codearena/execution-worker:latest
        ports:
        - containerPort: 9090
          name: metrics
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        envFrom:
        - configMapRef:
            name: execution-config
        - secretRef:
            name: execution-secrets
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        volumeMounts:
        - name: docker-sock
          mountPath: /var/run/docker.sock
        - name: tmp
          mountPath: /tmp
        securityContext:
          allowPrivilegeEscalation: true # Required for Docker access
          readOnlyRootFilesystem: false # Docker requires write access
          runAsNonRoot: false # Docker requires root access
          runAsUser: 0
          capabilities:
            add:
            - SYS_ADMIN # Required for Docker operations
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - "ps aux | grep -v grep | grep node"
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - "ps aux | grep -v grep | grep node"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
      volumes:
      - name: docker-sock
        hostPath:
          path: /var/run/docker.sock
          type: Socket
      - name: tmp
        emptyDir: {}
      tolerations:
      - key: "worker-node"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: "node-type"
                operator: In
                values: ["worker"]
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values: ["execution-worker"]
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: execution-worker
  namespace: codearena-execution
  labels:
    app.kubernetes.io/name: execution-worker
    app.kubernetes.io/component: worker

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: execution-worker
  labels:
    app.kubernetes.io/name: execution-worker
    app.kubernetes.io/component: worker
rules:
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list"]
- apiGroups: ["metrics.k8s.io"]
  resources: ["nodes", "pods"]
  verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: execution-worker
  labels:
    app.kubernetes.io/name: execution-worker
    app.kubernetes.io/component: worker
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: execution-worker
subjects:
- kind: ServiceAccount
  name: execution-worker
  namespace: codearena-execution

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: execution-worker-hpa
  namespace: codearena-execution
  labels:
    app.kubernetes.io/name: execution-worker
    app.kubernetes.io/component: worker
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: execution-worker
  minReplicas: 5
  maxReplicas: 50
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 75
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 85
  # Custom metric based on queue length (requires custom metrics API)
  - type: External
    external:
      metric:
        name: redis_queue_length
        selector:
          matchLabels:
            queue: "code-execution"
      target:
        type: AverageValue
        averageValue: "10"
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 30
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30
      - type: Pods
        value: 5
        periodSeconds: 30
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 180
      policies:
      - type: Percent
        value: 20
        periodSeconds: 60
      selectPolicy: Min

---
apiVersion: v1
kind: Service
metadata:
  name: execution-worker-headless
  namespace: codearena-execution
  labels:
    app.kubernetes.io/name: execution-worker
    app.kubernetes.io/component: worker
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - port: 9090
    targetPort: metrics
    protocol: TCP
    name: metrics
  selector:
    app.kubernetes.io/name: execution-worker
    app.kubernetes.io/component: worker 